<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GH670</title>
  
  <subtitle>挺菜的~，学习中...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.wblog.tech/"/>
  <updated>2020-11-19T08:22:02.851Z</updated>
  <id>www.wblog.tech/</id>
  
  <author>
    <name>GH670</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微软商店-加载失败</title>
    <link href="www.wblog.tech/suibi-microsoftstore.html"/>
    <id>www.wblog.tech/suibi-microsoftstore.html</id>
    <published>2020-11-19T08:19:59.868Z</published>
    <updated>2020-11-19T08:22:02.851Z</updated>
    
    <content type="html"><![CDATA[<p>1，首先我们打开“我的电脑”然后依次点击“计算机”“打开设置”  </p><a id="more"></a><p>2，打开“网络和internet”<br>3，在下面找到并打开“网络和共享中心”<br>4，打开”internet选项“<br>5，再点击“高级”<br>6，勾选“使用 TLS 1.1” 与“使用 TLS 1.2”最后点击”应用“就可以打开microsoft store。  </p>]]></content>
    
    <summary type="html">
    
      微软商店-加载失败
    
    </summary>
    
    
    
      <category term="随笔记事" scheme="www.wblog.tech/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>查看笔记本电池损耗</title>
    <link href="www.wblog.tech/suibi-chakandianchisunhao.html"/>
    <id>www.wblog.tech/suibi-chakandianchisunhao.html</id>
    <published>2020-11-10T12:25:12.676Z</published>
    <updated>2021-01-10T01:40:30.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li>找到“命令提示符”，点击右键，  </li><li>选择“使用管理员权限运行”在其中键入命令：  <a id="more"></a></li><li>Powercfg -energy（注Powercfg后有一个空格energy前面没有空格）  </li><li>回车  </li><li>程序将开始检查系统中与电源管理相关的策略、设置、软硬件兼容性，  </li><li>还要对当前运行的进程进行长达 60 秒的跟踪检测。  </li><li></li><li>结束之后，  </li><li>程序会将分析结果保存为  </li><li>命令提示符当前文件夹中名为energy-report.html的网页文件，  </li><li>用浏览器打开它。  <h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3></li></ul><p>1、按Win+X选择命令提示符（管理员）<br>2、在界面中，输入“cd %userprofile%\Documents”，回车即可，<br>3、接着输入命令：powercfg /batteryreport，回车后会在我的文档中生成保存一个html文件（battery-report.html）<br>4、接着在我的文档中找到这个battery-report.html文件，用浏览器打开即可看到电池信息了。</p>]]></content>
    
    <summary type="html">
    
      查看电池损耗
    
    </summary>
    
    
    
      <category term="随笔记事" scheme="www.wblog.tech/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Matlab记录</title>
    <link href="www.wblog.tech/stu-matlab.html"/>
    <id>www.wblog.tech/stu-matlab.html</id>
    <published>2020-06-18T00:29:45.568Z</published>
    <updated>2020-06-18T00:34:03.258Z</updated>
    
    <content type="html"><![CDATA[<p>Q&amp;A<br>简单记录，  </p><a id="more"></a><ol><li>未定义与 ‘char’ 类型的输入参数相对应的函数 ‘int’。<br>A；</li><li>输入后无反应，例如：Gauss.m<br>A:</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Q&amp;amp;A&lt;br&gt;简单记录，  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="stu" scheme="www.wblog.tech/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET</title>
    <link href="www.wblog.tech/stu-asp-net.html"/>
    <id>www.wblog.tech/stu-asp-net.html</id>
    <published>2020-06-12T12:01:46.029Z</published>
    <updated>2020-06-12T12:10:41.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a>ASP.NET</h1><p>ASP.NET又称为ASP+，不仅仅是ASP的简单升级，而是微软公司推出的新一代脚本语言。ASP.NET基于.NET Framework的Web开发平台，不但吸收了ASP以前版本的最大优点并参照Java、VB语言的开发优势加入了许多新的特色，同时也修正了以前的ASP版本的运行错误。  </p><p>ASP.NET就是属于WebForm，也就是平时说的B/S模式的开发。而WinForm就是属于C/S模式。  </p><p>.NET有很多种语言组成，比如C#、 VB.NET、J#、Jsript、Managed C++，但是都是运行在.NET FrameWork Run Time底下的。<br>Asp.NET可以用C#或VB.NET来开发。编译后形成CLR，通过服务器的IIS+.NET FrameWork再次编译来运行。  </p><a id="more"></a><h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><h3 id="ASP-NET和ASP的区别："><a href="#ASP-NET和ASP的区别：" class="headerlink" title="ASP.NET和ASP的区别："></a>ASP.NET和ASP的区别：</h3><p>ASP.NET和ASP的最大区别在于编程思维的转换以及功能的增强。<br>一、ASP使用VB/JS这样的弱类型、面向结构的脚本语言混合html来编程，而非面向对象，这就明显产生以下几个问题：<br>1、代码逻辑混乱，难于管理。<br>2、代码的可重用性差：由于是面向结构的编程方式，并且混合html，所以可能页面原型修改一点，整个程序都需要修改,代码重用性差。<br>3、弱类型造成潜在的出错可能。<br>因此在功能方面ASP同样存在问题：<br>1、功能太弱，一些底层操作只能通过组件来完成。<br>2、缺乏完善的纠错/调试功能。<br>二、ASP.NET理论上可以使用任何编程语言包括C#、VB.NET、JS、、J#、Managed C++等等，最合适的编程语言还是MS为.NET Frmaework专门推出的C#。<br>优点如下：<br>1、是面向对象的编程语言，简单易学。<br>2、具有面向对象编程语言的一切特性，比如封装性、继承性、多态性等等,封装性使得代码逻辑清晰，并且应用到ASP.NET上就可以使业务逻辑和Html页面分离；继承性和多态性使得代码的可重用性大大提高  </p><blockquote><p><a href="https://baike.baidu.com/item/asp.net" target="_blank" rel="noopener">asp.net</a> ：<a href="https://baike.baidu.com/item/asp.net" target="_blank" rel="noopener">https://baike.baidu.com/item/asp.net</a><br>转载：<a href="https://zhidao.baidu.com/question/15906060.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/15906060.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      asp.net
    
    </summary>
    
    
    
      <category term="stu" scheme="www.wblog.tech/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>使用Python进行学生成绩预测分析</title>
    <link href="www.wblog.tech/python-dazuoye.html"/>
    <id>www.wblog.tech/python-dazuoye.html</id>
    <published>2020-06-05T01:09:57.920Z</published>
    <updated>2020-10-03T08:30:17.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-学生成绩分析预测-实例"><a href="#Python-学生成绩分析预测-实例" class="headerlink" title="Python~学生成绩分析预测-实例"></a>Python~学生成绩分析预测-实例</h1><p>估计只有自己能够看懂的系列~~乱七八糟学习记录。<br>代码见GitHub仓库————：Stu_data_analysis（<a href="https://github.com/GH670/Stu_data_analysis）" target="_blank" rel="noopener">https://github.com/GH670/Stu_data_analysis）</a></p><a id="more"></a><h1 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h1><h2 id="sklearn的train-test-split"><a href="#sklearn的train-test-split" class="headerlink" title="sklearn的train_test_split"></a>sklearn的train_test_split</h2><p>train_test_split函数用于将矩阵随机划分为训练子集和测试子集，并返回划分好的训练集测试集样本和训练集测试集标签。<br>格式：<br>X_train,X_test, y_train, y_test =cross_validation.train_test_split(train_data,train_target,test_size=0.3, random_state=0)   </p><p>参数解释：<br>train_data：被划分的样本特征集<br>train_target：被划分的样本标签<br>test_size：如果是浮点数，在0-1之间，表示样本占比；如果是整数的话就是样本的数量<br>random_state：是随机数的种子。<br>随机数种子：其实就是该组随机数的编号，在需要重复试验的时候，保证得到一组一样的随机数。比如你每次都填1，其他参数一样的情况下你得到的随机数组是一样的。但填0或不填，每次都会不一样。<br>随机数的产生取决于种子，随机数和种子之间的关系遵从以下两个规则：<br>种子不同，产生不同的随机数；种子相同，即使实例不同也产生相同的随机数。  </p><h2 id="Sklearn库中Logistic-Regression函数各个参数总结"><a href="#Sklearn库中Logistic-Regression函数各个参数总结" class="headerlink" title="Sklearn库中Logistic Regression函数各个参数总结"></a>Sklearn库中Logistic Regression函数各个参数总结</h2><blockquote><p><a href="https://blog.csdn.net/qq_38683692/article/details/82533460" target="_blank" rel="noopener">https://blog.csdn.net/qq_38683692/article/details/82533460</a></p></blockquote><ul><li>Python的Sklearn库的基本用法<blockquote><p><a href="https://www.cnblogs.com/zx931880423/p/11543256.html" target="_blank" rel="noopener">https://www.cnblogs.com/zx931880423/p/11543256.html</a></p></blockquote></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>机器学习之特征工程<br><a href="http://www.csuldw.com/2015/10/24/2015-10-24%20feature%20engineering/" target="_blank" rel="noopener">http://www.csuldw.com/2015/10/24/2015-10-24%20feature%20engineering/</a><br><a href="https://blog.csdn.net/m0_38024592/article/details/80836217" target="_blank" rel="noopener">https://blog.csdn.net/m0_38024592/article/details/80836217</a><br>df.drop()<br><a href="https://blog.csdn.net/qq_42774323/article/details/99737466" target="_blank" rel="noopener">https://blog.csdn.net/qq_42774323/article/details/99737466</a>  </p><p>阿里天池<br><a href="https://tianchi.aliyun.com/notebook-ai/detail?spm=5176.12282024.0.0.1b9740can009cL&amp;postId=70797" target="_blank" rel="noopener">https://tianchi.aliyun.com/notebook-ai/detail?spm=5176.12282024.0.0.1b9740can009cL&amp;postId=70797</a><br><a href="https://tianchi.aliyun.com/notebook-ai/detail?postId=38470" target="_blank" rel="noopener">https://tianchi.aliyun.com/notebook-ai/detail?postId=38470</a>  </p><p>Python的Sklearn库的基本用法<br><a href="https://www.cnblogs.com/zx931880423/p/11543256.html" target="_blank" rel="noopener">https://www.cnblogs.com/zx931880423/p/11543256.html</a><br>sklearn的train_test_split<br><a href="https://www.cnblogs.com/bonelee/p/8036024.html" target="_blank" rel="noopener">https://www.cnblogs.com/bonelee/p/8036024.html</a>  </p><p>【一】零基础入门深度学习：用numpy实现神经网络训练<br><a href="https://mp.weixin.qq.com/s/_2ya_3l1wT9PEKi9aEw7ww" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/_2ya_3l1wT9PEKi9aEw7ww</a>  </p><p>对分类型变量，进行编码处理——pd.get_dummies()、LabelEncoder()、oneHotEncoder()<br><a href="https://www.cnblogs.com/wyy1480/p/10295084.html" target="_blank" rel="noopener">https://www.cnblogs.com/wyy1480/p/10295084.html</a>  </p><p>机器学习入门-概率阈值的逻辑回归对准确度和召回率的影响 lr.predict_pr<br><a href="https://www.cnblogs.com/my-love-is-python/p/10271240.html" target="_blank" rel="noopener">https://www.cnblogs.com/my-love-is-python/p/10271240.html</a>  </p><h2 id="aliyun"><a href="#aliyun" class="headerlink" title="aliyun"></a>aliyun</h2><p>学生成绩预测_PAT最佳实践<br><a href="https://help.aliyun.com/document_detail/43891.html#h2-u6570u636Eu96C6u4ECBu7ECD2" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/43891.html#h2-u6570u636Eu96C6u4ECBu7ECD2</a>  </p><p>python数据分析（三）——逻辑回归之学生成绩预测<br><a href="https://zhuanlan.zhihu.com/p/87846855" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/87846855</a>  </p><p>逻辑回归实战练习——根据学生成绩预测是否被录取<br><a href="https://zhuanlan.zhihu.com/p/61414743" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/61414743</a>  </p><p>Python 机器学习实战：根据成绩预测大学生能否被高校录取<br><a href="https://blog.csdn.net/dengheCSDN/article/details/79054091" target="_blank" rel="noopener">https://blog.csdn.net/dengheCSDN/article/details/79054091</a>  </p><p>【机器学习PAI实践八】用机器学习算法评估学生考试成绩<br><a href="https://blog.csdn.net/buptgshengod/article/details/73087225" target="_blank" rel="noopener">https://blog.csdn.net/buptgshengod/article/details/73087225</a>  </p><p>阿里天池学生考试成绩预测-<br><a href="https://tianchi.aliyun.com/notebook-ai/detail?spm=5176.12282024.0.0.1b9740can009cL&amp;postId=70797" target="_blank" rel="noopener">https://tianchi.aliyun.com/notebook-ai/detail?spm=5176.12282024.0.0.1b9740can009cL&amp;postId=70797</a><br><a href="https://tianchi.aliyun.com/notebook-ai/detail?spm=5176.12281915.0.0.340c355emr7Jj0&amp;postId=38406" target="_blank" rel="noopener">https://tianchi.aliyun.com/notebook-ai/detail?spm=5176.12281915.0.0.340c355emr7Jj0&amp;postId=38406</a>  </p><h2 id="学无止境"><a href="#学无止境" class="headerlink" title="学无止境"></a>学无止境</h2><ul><li>机器学习，只有趋于无限的接近。</li></ul><h2 id="Sklearn库"><a href="#Sklearn库" class="headerlink" title="Sklearn库"></a>Sklearn库</h2><p>利用sklearn库实现逻辑回归<br>从linear_model类中调用LogisticRegression模型    </p><ul><li>部分引用：  </li><li>Python的Sklearn库的基本用法：<a href="https://www.cnblogs.com/zx931880423/p/11543256.html" target="_blank" rel="noopener">https://www.cnblogs.com/zx931880423/p/11543256.html</a></li><li>Python根据成绩分析系统浅析：<a href="http://www.manongjc.com/article/51832.html" target="_blank" rel="noopener">http://www.manongjc.com/article/51832.html</a></li></ul><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><ol><li>ValueError: could not convert string to float: ‘H’</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-学生成绩分析预测-实例&quot;&gt;&lt;a href=&quot;#Python-学生成绩分析预测-实例&quot; class=&quot;headerlink&quot; title=&quot;Python~学生成绩分析预测-实例&quot;&gt;&lt;/a&gt;Python~学生成绩分析预测-实例&lt;/h1&gt;&lt;p&gt;估计只有自己能够看懂的系列~~乱七八糟学习记录。&lt;br&gt;代码见GitHub仓库————：Stu_data_analysis（&lt;a href=&quot;https://github.com/GH670/Stu_data_analysis）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/GH670/Stu_data_analysis）&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="stu" scheme="www.wblog.tech/tags/stu/"/>
    
  </entry>
  
  <entry>
    <title>那些年，写出的bug.</title>
    <link href="www.wblog.tech/hexo-error-fatal.html"/>
    <id>www.wblog.tech/hexo-error-fatal.html</id>
    <published>2020-05-22T01:21:41.133Z</published>
    <updated>2020-05-26T01:59:14.961Z</updated>
    
    <content type="html"><![CDATA[<ul><li>那些年，写出的bug,供大家欣赏🤣<a id="more"></a></li></ul><ol><li>undefined reference to winmain<br>main?mian?</li><li>[Error] expected ‘;’ before ‘struct’<br>;</li><li>[Error] stray ‘\273’ in program<br>:?;?</li><li>[Error] expected ‘}’ at end of input<br>缺少’}’</li><li>error: reference to ‘min’ is ambiguous<br>自定义的变量名与库中的重名了  </li><li>未完待续..</li></ol>]]></content>
    
    <summary type="html">
    
      代码编写过程 error
    
    </summary>
    
    
    
      <category term="基础" scheme="www.wblog.tech/tags/basis/"/>
    
  </entry>
  
  <entry>
    <title>CCF 201403-1 相反数</title>
    <link href="www.wblog.tech/ccf201403-1.html"/>
    <id>www.wblog.tech/ccf201403-1.html</id>
    <published>2020-05-19T11:44:48.273Z</published>
    <updated>2020-05-19T12:30:26.801Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述<br>　　有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。<br>输入格式<br>　　第一行包含一个正整数 N。(1 ≤ N ≤ 500)。<br>　　第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。<br>输出格式<br>　　只输出一个整数,即这 N 个数中包含多少对相反数。  </p><a id="more"></a><p>样例输入<br>5<br>1 2 3 -1 -2<br>样例输出<br>2  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i]+a[j]==<span class="number">0</span>)</span><br><span class="line">sum++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CCF 201403-1 相反数
    
    </summary>
    
    
    
      <category term="CCF" scheme="www.wblog.tech/tags/CCF/"/>
    
  </entry>
  
  <entry>
    <title>CCF 201409-1 相邻数对</title>
    <link href="www.wblog.tech/ccf201409-1.html"/>
    <id>www.wblog.tech/ccf201409-1.html</id>
    <published>2020-05-19T11:30:57.438Z</published>
    <updated>2020-05-19T12:30:42.407Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述<br>　　给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。<br>输入格式<br>　　输入的第一行包含一个整数n，表示给定整数的个数。<br>　　第二行包含所给定的n个整数。<br>输出格式<br>　　输出一个整数，表示值正好相差1的数对的个数。  </p><a id="more"></a><p>样例输入<br>6<br>10 2 6 3 7 8<br>样例输出<br>3<br>样例说明<br>　　值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。<br>评测用例规模与约定<br>　　1&lt;=n&lt;=1000，给定的整数为不超过10000的非负整数。    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n - i; j++)&#123; </span><br><span class="line"><span class="keyword">if</span> ((num[i] == num[i + j] + <span class="number">1</span>) || (num[i] == num[i + j] - <span class="number">1</span>))</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CCF，201409-1，相邻数对
    
    </summary>
    
    
    
      <category term="CCF" scheme="www.wblog.tech/tags/CCF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-关于静态博客动态说说的实现</title>
    <link href="www.wblog.tech/hexo-shuoshuo.html"/>
    <id>www.wblog.tech/hexo-shuoshuo.html</id>
    <published>2020-05-11T11:11:17.008Z</published>
    <updated>2020-05-11T11:49:46.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul><li>基于leancloud实现的可实时发布说说的js.</li><li>指条明路 → <a href="https://artitalk.js.org/" target="_blank" rel="noopener">https://artitalk.js.org/</a></li><li>由于此项目处于初期阶段，更新或许比较频繁，故此文仅作参考，建议去查阅官方文档。<a id="more"></a><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><h2 id="Leancloud"><a href="#Leancloud" class="headerlink" title="Leancloud"></a>Leancloud</h2></li></ul><ol><li>使用国际版的leancloud注册账号以及完成绑定邮箱及手机号等实名操作，否则不能创建应用。</li><li>创建应用，名称随意，建议取名为shuoshuo.</li><li>在新创建的应用中，找到”结构化数据”下的”用户”，点击”添加用户”,输入用户名密码，记住此用户名密码，下面的设置会用到。</li><li>点击”结构化数据”，点击”class”下的”shuoshuo”。找到”权限”，在”Class”访问权限”中,将”add_fields”,”create”,”delete”,”update”设置指定用户可见，输入刚刚设置的用户名，系统会自动匹配到刚刚你设置的用户名密码的，点击添加并确认即可。</li><li>在菜单栏中找到”设置”-&gt;”应用keys”，将”AppID”和”AppKey”记录下来，之后的设置会用到。</li></ol><h2 id="hexo博客"><a href="#hexo博客" class="headerlink" title="hexo博客"></a>hexo博客</h2><ol><li><p>hexo new page shuoshuo ,生成一个说说界面，在此文件夹中的index.md文件中，填下下属代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://libs.baidu.com/jquery/2.0.0/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var img="";                 /</span><span class="regexp">/说说旁边显示的头像</span></span><br><span class="line"><span class="regexp">var appID="";               /</span><span class="regexp">/Leancloud中的AppID</span></span><br><span class="line"><span class="regexp">var appKEY="";              /</span><span class="regexp">/Leancloud中的AppKEY</span></span><br><span class="line"><span class="regexp">var per="";                 /</span><span class="regexp">/每页显示说说的数量</span></span><br><span class="line"><span class="regexp">var username="";            /</span><span class="regexp">/Leancloud中设置的用户名</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;div id=<span class="string">"lazy"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="artitalk"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://unpkg.com/artitalk"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>上述中列出来的五项var，均为必须设置。<br>其中还可以在后添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> placeholder1=<span class="string">""</span><span class="comment">//在编辑说说的输入框中的占位符</span></span><br><span class="line"><span class="keyword">var</span> placeholder2=<span class="string">""</span><span class="comment">//输入密码的输入框的占位符</span></span><br><span class="line"><span class="keyword">var</span> placeholder3=<span class="string">""</span><span class="comment">//输入头像url的输入框的占位符（不填写开启即为默认头像）</span></span><br><span class="line"><span class="keyword">var</span> lazy=<span class="string">""</span>        <span class="comment">//是否开启加载动画（1：开启 0：关闭）</span></span><br><span class="line"><span class="keyword">var</span> bgimg=<span class="string">""</span>    <span class="comment">//说说输入框背景图片（需为图片格式）</span></span><br></pre></td></tr></table></figure></li><li><p>更新测试  </p></li></ol><ul><li>hexo g &amp;&amp; hexo s,进行本地的更新测试。<br>打开设置的说说界面，这个说说界面还需要在博客主题目录下的_config.yml添加，不同的主题添加的方式不同，我的主题为在menu中添加”说说：/shuoshuo/“即可。<br>进入说说界面，进行测试即可。<br>输入完说说的内容后，输入之前在leancloud创建的shuoshuo应用中,设置的用户名的密码，点击发布即可。</li></ul><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>项目目前处于初步阶段，更新或频繁，建议多多阅读官方的使用文档。</li><li>我的主题为yileas,基于yilia主题的魔改版。</li><li>再次声明，此教程仅作参考，详细具体还请详见项目使用文档。</li><li>教程就是这么的简单，该功能的添加并不复杂，原则上适合任何的hexo主题。<blockquote><p>项目源地址：<a href="https://github.com/Drew233/Artitalk" target="_blank" rel="noopener">https://github.com/Drew233/Artitalk</a><br>项目文档：<a href="https://artitalk.js.org/" target="_blank" rel="noopener">https://artitalk.js.org/</a><br>我的说说：<a href="https://wblog.tech/photos/Sshuo.html" target="_blank" rel="noopener">https://wblog.tech/photos/Sshuo.html</a>  </p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      Hexo-实现静态博客的动态说说
    
    </summary>
    
    
    
      <category term="hexo" scheme="www.wblog.tech/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git-部分指令</title>
    <link href="www.wblog.tech/git-bufenzhiling.html"/>
    <id>www.wblog.tech/git-bufenzhiling.html</id>
    <published>2020-05-10T07:57:06.865Z</published>
    <updated>2020-05-11T03:37:02.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul><li>记录一些常用的git指令，</li><li>学习记录~<a id="more"></a><h1 id="git指令"><a href="#git指令" class="headerlink" title="git指令"></a>git指令</h1><h2 id="git指令（一）"><a href="#git指令（一）" class="headerlink" title="git指令（一）"></a>git指令（一）</h2></li></ul><ol><li>git本地上传至仓库(已链接远程仓库的情况下)</li></ol><ul><li>git init</li><li>git add .</li><li>git commit -m ‘描述’</li><li>git pull –rebase origin marster</li><li>git push -u origin master</li></ul><ol start="2"><li>git远程与本地链接  </li></ol><ul><li>git remote -v<br>查看本地关联的远程仓库</li><li>git remote add origin ‘远程仓库地址’<br>本地关联远程仓库</li><li>git remote rm origin<br>取消本地关联的远程仓库</li></ul><h2 id="git指令（二）"><a href="#git指令（二）" class="headerlink" title="git指令（二）"></a>git指令（二）</h2><ol><li>git-分支</li></ol><ul><li>git branch<br>查看本地分支</li><li>git branch -r<br>查看远程分支</li><li>git branch -a<br>查看所有分支</li><li>git branch [newbranch]<br>创建新的分支</li><li>git checkout [newbranch]<br>切换分支</li><li>git push origin [newbranch]<br>将新分支push到GitHub</li><li>git branch -D -r<br>删除本地分支</li></ul><blockquote><p>在进行分支操作的时候，注意当前所属分支</p></blockquote><h2 id="git指令（三）"><a href="#git指令（三）" class="headerlink" title="git指令（三）"></a>git指令（三）</h2><ul><li>待续..</li></ul>]]></content>
    
    <summary type="html">
    
      Git-部分指令
    
    </summary>
    
    
    
      <category term="git" scheme="www.wblog.tech/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-实现博客的相册模块</title>
    <link href="www.wblog.tech/hexo-xiangce.html"/>
    <id>www.wblog.tech/hexo-xiangce.html</id>
    <published>2020-05-09T03:07:06.027Z</published>
    <updated>2020-05-11T03:37:56.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul><li>Hexo——为你的博客添加相册功能。  </li><li>大体实现：在GitHub上创建一个新的仓库，存储图片。通过python脚本程序，对图片进行裁剪压缩，上传至GitHub仓库。生成josn格式数据，通过此文件进行图片的显示访问。  </li></ul><a id="more"></a><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="1-GitHub操作"><a href="#1-GitHub操作" class="headerlink" title="1.GitHub操作"></a>1.GitHub操作</h2><ul><li>创建GitHub图库<br>在你的GitHub中创建一个新的GitHub仓库，命名随意，我的命名是跟随参考教程里大佬的命名：Blog-Back-Up。<h2 id="2-本地操作"><a href="#2-本地操作" class="headerlink" title="2.本地操作"></a>2.本地操作</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3></li></ul><ol><li><p>在<strong>博客根目录</strong>下的source文件夹下建立一个photos文件夹</p></li><li><p>将样式文件放到photos文件夹下，样式文件如下图所示，样式文件的下载地址为：<a href="https://github.com/GH670/photos-file" target="_blank" rel="noopener">https://github.com/GH670/photos-file</a><br><img src="https://cdn.jsdelivr.net/gh/GH670/img@master/2020/05/09/97cb4c54887d8ef895eb958e692b3f47.png" alt=""></p></li></ol><p><strong>说明一下❗：红色框框中的是需要放置在该文件夹内的文件。黑色框框中的文件夹内的文件是需要放置到本博文第二部分所说的文件夹内的。黄色框中的是第二部分所说的生成的data.json文件。</strong><br>3. 修改ins.js文件中的render函数，将其中的url修改对应至你存放图片的地址<br><img src="https://cdn.jsdelivr.net/gh/GH670/img@master/2020/05/09/9438ef11c415bec933d883b682b9edba.png" alt=""></p><ul><li><strong>特别说明❗</strong>：  </li><li>其中的url地址，为下图红框框中内容所示，点击图片显示后、点击<strong>Download</strong>后的url地址。不是下面图片所处状态的url地址。或可根据下方代码段中地址样式修改。  </li><li>对于本文中第二个图片中红色画线的路径，保证本文第一个图片中红色方框框中的内容均放置位置正确，即可不用修改。<br><img src="https://cdn.jsdelivr.net/gh/GH670/img@master/2020/05/09/87b2dac1f2be480674cea0524d038318.png" alt=""></li></ul><p>或可根据下面代码段地址样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var minSrc &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;GH670&#x2F;Blog-Back-Up&#x2F;master&#x2F;min_photos&#x2F;&#39; + data.link[i];</span><br><span class="line">var src &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;GH670&#x2F;Blog-Back-Up&#x2F;master&#x2F;photos&#x2F;&#39; + data.link[i];</span><br><span class="line">&#x2F;&#x2F;var minSrc &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;lawlite19&#x2F;blog-back-up&#x2F;master&#x2F;min_photos&#x2F;&#39; + data.link[i];</span><br><span class="line">&#x2F;&#x2F;var src &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;lawlite19&#x2F;blog-back-up&#x2F;master&#x2F;photos&#x2F;&#39; + data.link[i];</span><br></pre></td></tr></table></figure><p>得出，可按下方所示填写修改url。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var minSrc &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;你的GitHub用户名&#x2F;GitHub仓库名&#x2F;master&#x2F;min_photos&#x2F;&#39; + data.link[i];</span><br><span class="line">var src &#x3D; &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;你的GitHub用户名&#x2F;GitHub仓库名&#x2F;master&#x2F;photos&#x2F;&#39; + data.link[i];</span><br></pre></td></tr></table></figure><p><strong>务必仔细查看，地址切勿填写错误❗</strong></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><ol start="4"><li>在你的本地任何一个位置建立一个新的文件夹。存放要上传至GitHub相册图库的相片及文件。<br>将此文件夹与上述建立的存放相片的GitHub仓库相连接，具体的git指令此处不再过多说明，可见此链接文章：<a href="https://wblog.tech/github-push.html" target="_blank" rel="noopener">https://wblog.tech/github-push.html</a>，如果有什么疑问可留言。</li><li>将上述下载的文件中，黑色框中文件夹内的文件放置在本地该文件夹内。<br>(即下方图片所示文件)<br><img src="https://cdn.jsdelivr.net/gh/GH670/img@master/2020/05/09/bb84a07f4f8668cd908bfe321a4231a7.png" alt=""></li><li>修改tool.py文件大约135行处，如下图，将下面位置路径修改为你本地位置的。<strong>此处非常重要</strong>，此处为data.json文件的生成路径，将此文件生成至博客根目录下source/photos文件夹下即可。放置错误可能会导致最终设置完成后相册界面并不能加载出任何的相片，只会显示“图片正在加载中..”，<strong>切记data.json文件的生成路径要为博客根目录下source/photos文件中。</strong><br><img src="https://cdn.jsdelivr.net/gh/GH670/img@master/2020/05/09/362905b52401e30dea84b2d70f12eb21.png" alt=""></li><li>每次向相册中添加新的相片时，都需要运行tool.py文件。tool.py中存放着对图片的一系列操作函数、操作完成后产生data.j文件以及将操作后的相片上传至GitHub仓库中。<strong>注意此处，GitHub仓库的连接要保证没有问题，否则会上传不上去文件，进而导致相册功能的失败</strong><br><em>此外，运行python脚本文件需电脑安装有python的运行环境。</em></li></ol><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><a href="https://wblog.tech/photos/" target="_blank" rel="noopener">https://wblog.tech/photos/</a>  </p><ul><li>由于相册中相片是放置在GitHub仓库中的，基于国内访问GitHub的速度，在不翻墙的情况下，大多数时间会导致图片显示不出来。主要原因就是国内访问GitHub网站速度慢。  </li><li>解决方法：1.cdn加速 2.VPN</li></ul><blockquote><p>参考如下：<br><a href="https://blog.csdn.net/u013082989/article/details/70162293" target="_blank" rel="noopener">https://blog.csdn.net/u013082989/article/details/70162293</a><br><a href="https://blog.csdn.net/wardseptember/article/details/82780684" target="_blank" rel="noopener">https://blog.csdn.net/wardseptember/article/details/82780684</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      Hexo-实现博客的相册模块
    
    </summary>
    
    
    
      <category term="hexo" scheme="www.wblog.tech/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-友链样式的优化</title>
    <link href="www.wblog.tech/hexo-youlianyouhua.html"/>
    <id>www.wblog.tech/hexo-youlianyouhua.html</id>
    <published>2020-05-07T04:21:51.002Z</published>
    <updated>2020-05-11T03:38:03.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul><li>友链样式的优化，增加头像…  <a id="more"></a><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1></li></ul><ol><li>在tools.ejs文件里找到以下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% for (var i in theme.friends)&#123; %&gt;    </span><br><span class="line">    &lt;li class&#x3D;&quot;search-li&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;&lt;%- url_for(theme.friends[i]) %&gt;&quot; target&#x3D;&quot;_blank&quot; style&#x3D;&quot;color:#969696&quot; class&#x3D;&quot;search-title&quot;&gt;&lt;i class&#x3D;&quot;icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;%if( url_for(theme.friends[i]) )&#123;%&gt;</span><br><span class="line">            &lt;%&#x3D; i %&gt;&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li>将&lt;%= i %&gt;前面加上以下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img class&#x3D;&quot;imgUrl&quot; src&#x3D;&quot;&lt;%&#x3D;  url_for(theme.friends[i]) + &#39;favicon.ico&#39; %&gt;&quot;  alt&#x3D;&quot;icon&quot; height&#x3D;&quot;25&quot; width&#x3D;&quot;25&quot;  &#x2F;&gt;&amp;nbsp&amp;nbsp&amp;nbsp</span><br></pre></td></tr></table></figure></li><li>将tools.ejs文件尾部加上以下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  t &#x3D; document.getElementsByClassName(&quot;imgUrl&quot;);</span><br><span class="line">  for(i &#x3D; 0; i &lt; t.length; i++)&#123;</span><br><span class="line">      t.item(i).onerror &#x3D; function()&#123;</span><br><span class="line">        this.src &#x3D; &quot;https:&#x2F;&#x2F;GH670.github.io&#x2F;F3yaX.png&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>这样，就为友链增加了头像，后续优化，待定…<blockquote><p>参考：链接失效…</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      Hexo-友链样式的优化
    
    </summary>
    
    
    
      <category term="hexo" scheme="www.wblog.tech/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-为博客增加Dplayer视频播放插件</title>
    <link href="www.wblog.tech/hexo-dplayer.html"/>
    <id>www.wblog.tech/hexo-dplayer.html</id>
    <published>2020-05-06T09:16:08.934Z</published>
    <updated>2020-05-11T03:37:43.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>为博客文章增加视频播放功能，如我的博客文章：<a href="https://wblog.tech/bilibili-houlang.html" target="_blank" rel="noopener">bilibli~后浪</a> 所示。</p><a id="more"></a><h1 id="Dplayer功能插件"><a href="#Dplayer功能插件" class="headerlink" title="Dplayer功能插件"></a>Dplayer功能插件</h1><p>一个将diygod的dplayer运行在hexo的插件  </p><blockquote><p>项目地址：<a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">https://github.com/MoePlayer/hexo-tag-dplayer</a>  </p></blockquote><h1 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h1><ol><li>npm install hexo-tag-dplayer –save</li><li>简单使用：（以bilibili为例）</li></ol><ul><li>打开一个视频，鼠标移至’分享’处。</li><li>选择’嵌入代码’，点击复制。<br>样式如下：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;71816014&amp;bvid&#x3D;BV11E411k76T&amp;cid&#x3D;124600873&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot;&gt; &lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure>效果如下：    </li></ul><iframe src="//player.bilibili.com/player.html?aid=71816014&bvid=BV11E411k76T&cid=124600873&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>  <p>另外可选择设置大小宽高：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe height&#x3D;600 width&#x3D;1000 src&#x3D;&quot;&#x2F;&#x2F;player.bilibili.com&#x2F;player.html?aid&#x3D;71816014&amp;bvid&#x3D;BV11E411k76T&amp;cid&#x3D;124600873&amp;page&#x3D;1&quot; scrolling&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; frameborder&#x3D;&quot;no&quot; framespacing&#x3D;&quot;0&quot; allowfullscreen&#x3D;&quot;true&quot;&gt; &lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><p>修改大小宽高后显示效果如下：    </p><iframe height=600 width=1000 src="//player.bilibili.com/player.html?aid=71816014&bvid=BV11E411k76T&cid=124600873&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>    <p>具体实现，可进入上方给出的GitHub地址进行查看，这只是简单的实现。<br>最后，看完博文操作完成后可以顺便欣赏下B站UP主【小仙若】的优美舞姿😋  </p><blockquote><p>存在些许不足和bug,<br>适配问题未解决，视频大小固定不适配。待更新..<br>该插件插入方式..详见GitHub仓库</p></blockquote><p>另外插入方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer key&#x3D;value ... %&#125;</span><br></pre></td></tr></table></figure><p>详细介绍，➡GitHub仓库内。</p>]]></content>
    
    <summary type="html">
    
      Hexo-为博客增加Dplayer视频播放插件
    
    </summary>
    
    
    
      <category term="hexo" scheme="www.wblog.tech/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>bilibili~后浪</title>
    <link href="www.wblog.tech/bilibili-houlang.html"/>
    <id>www.wblog.tech/bilibili-houlang.html</id>
    <published>2020-05-04T12:43:05.339Z</published>
    <updated>2020-05-11T03:35:24.914Z</updated>
    
    <content type="html"><![CDATA[<p>奔涌吧！后浪！！🛫  </p><iframe height=600 width=1000 src="//player.bilibili.com/player.html?aid=412935552&bvid=BV1FV411d7u7&cid=186803402&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>  <a id="more"></a>  <p>那些口口声声，<br>一代不如一代的人，应该看着你们；<br>像我一样，我看着你们，满怀羡慕。<br>人类积攒了几千年的财富，<br>所有的知识、见识、智慧和艺术，<br>像是专门为你们准备的礼物；<br>科技繁荣、文化繁茂、城市繁华，<br>现代文明的成果被层层打开，可以尽情地享用；<br>自由学习一门语言、学习一门手艺、欣赏一部电影、去遥远的地方旅行。<br>很多人，从小你们就在自由探索自己的兴趣；<br>很多人在童年就进入了不惑之年；<br>不惑于自己喜欢什么，不喜欢什么。<br>人与人之间的壁垒被打破，<br>你们只凭相同的爱好，<br>就能结交千万个值得干杯的朋友，<br>你们拥有了，我们曾经梦寐以求的权利——选择的权利<br>你所热爱的就是你的生活，你们有幸遇见这样的时代；<br>但是时代更有幸，遇见这样的你们。<br>我看着你们，满怀敬意。<br>向你们的专业态度致敬，<br>你们正在把传统的变成现代的，把经典的变成流行的；<br>把学术的变成大众的，把民族变成世界的；<br>你们把自己的热爱变成了一个和成千上万的人分享快乐的事业，<br>向你们的自信致敬。<br>弱小的人，才习惯嘲讽和否定；<br>内心强大的人，从不吝啬赞美和鼓励。<br>向你们的大气致敬，<br>小人同而不和，君子美美与共，和而不同。<br>更年轻的身体，更容得下多元的文化审美和价值观。<br>有一天我终于发现，<br>不只是我们在如何教你们生活，<br>你们也在启发我们，怎样去更好的生活。<br>那些抱怨一代不如一代的人，应该看看你们；<br>就像我一样，我看着你们满怀感激；<br>因为你们这个世界会更喜欢中国，<br>因为一个国家最好看的风景，<br>就是这个国家的年轻人。<br>因为你们，<br>这世上的小说、音乐、电影所表现的青春<br>就不再是忧伤迷茫，而是善良、勇敢、无私、无所畏惧。<br>是心里有火，眼里有光。<br>不用活成我们想象中的样子，<br>我们这一代人的想象力不足以想象你们的未来；<br>如果你们依然需要我们的祝福，<br>那么，<br>奔涌吧，后浪<br>我们在同一条奔涌的河流。  </p>]]></content>
    
    <summary type="html">
    
      bilibili~后浪
    
    </summary>
    
    
    
      <category term="随笔记事" scheme="www.wblog.tech/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-魔改yilia主题~Yileas</title>
    <link href="www.wblog.tech/hexo-theme-yileas.html"/>
    <id>www.wblog.tech/hexo-theme-yileas.html</id>
    <published>2020-05-02T22:58:06.521Z</published>
    <updated>2020-05-26T01:59:00.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于yilia的魔改操作-yileas"><a href="#基于yilia的魔改操作-yileas" class="headerlink" title="基于yilia的魔改操作~yileas"></a>基于yilia的魔改操作~yileas</h1><blockquote><p>GitHub地址：<a href="https://github.com/GH670/yileas" target="_blank" rel="noopener">https://github.com/GH670/yileas</a>    </p></blockquote><p>存在许多的不足，欢迎大家的issues、PR、star.  </p><a id="more"></a><h1 id="yileas"><a href="#yileas" class="headerlink" title="yileas"></a>yileas</h1><p>hexo-theme-yileas🎈<br>基于<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia主题</a>的个性化定制——<strong>yileas</strong>  </p><blockquote><p>欢迎访问我的博客：<a href="https://wblog.tech/" target="_blank" rel="noopener">wblog.tech</a> 查看效果。</p></blockquote><h2 id="yileas-→-注重准确-崇尚简洁"><a href="#yileas-→-注重准确-崇尚简洁" class="headerlink" title="yileas → 注重准确,崇尚简洁"></a><strong>yileas → 注重准确,崇尚简洁</strong></h2><p>目前仅仅对原主题进行了 <em>魔改</em> .<br>后续会<strong>慢慢地</strong>对其进行更改<br>欢迎各位的PR.<br><a href="#说明">说明</a>  </p><h2 id="魔改："><a href="#魔改：" class="headerlink" title="魔改："></a>魔改：</h2><h3 id="更改："><a href="#更改：" class="headerlink" title="更改："></a>更改：</h3><ul><li>不定期优化</li></ul><ol><li>简单化的内容修改</li><li>增加网站运行时间</li><li>增加访问量统计功能(不蒜子)</li><li>添加代码复制功能</li><li>添加天气功能模块duigoucha</li><li>添加版权声明</li><li>添加valine评论系统</li><li>修复部分bug,修复微信分享，添加文章访问量统计</li><li>添加字数、阅读时长统计（博客根目录：npm i -save hexo-wordcount）</li><li>实现文章内容的加密（博客根目录：npm install hexo-blog-encrypt）<br>需加密文章的Front-matter中添加：<br>password: 是该博客加密使用的密码<br>abstract: 是该博客的摘要，会显示在博客的列表页<br>message: 这个是博客查看时，密码输入框上面的描述性文字  </li><li>实现文章的置顶功能  ①更改插件 ②修改源码 （均在博客根目录有修改）<br>修改博客根目录下的_config.yml → index_generator（order_by: top: -1 date: -1 ）<br>在需要置顶的文章的Front-matter中加上top选项即可<br>top后面的数字越大，优先级越高。</li><li>添加”说说”功能，可动态实时发布说说。(博客根目录下：hexo new page shuoshuo)<br>博客根目录下的操作，简化版教程:<a href="https://wblog.tech/hexo-shuoshuo.html" target="_blank" rel="noopener">https://wblog.tech/hexo-shuoshuo.html</a> (建议查看官方文档！)<br>官方文档:<a href="https://artitalk.js.org/" target="_blank" rel="noopener">https://artitalk.js.org/</a>  </li><li>添加备案信息</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>博客根目录下的_config.yml需按照自己所需更改。</li><li>主题根目录下的_config.yml按照所给’框架’填写即可，可自行按照所需更改。</li><li>。。。</li></ol><h3 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h3><ol><li>优化..</li><li>Fork me on GitHub</li><li>(layout.ejs/公告)</li><li>…</li></ol><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p><del>1. DaoVoice在线聊天</del><br><del>2. live2d看板娘</del><br><del>3. 飘雪特效</del><br><del>4. 页面点击小红心效果</del><br><del>5. 网易云音乐插件</del><br><del>6. 头像旋转功能</del><br><del>7. 文字输入特效</del><br><del>8. 添加悬停预览图片效果</del><br><strong>均会拖慢加载速度，非必需，未更改</strong></p><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>能力欠缺，完善中…</li><li>yileas为yilia的个人魔改版。因yilia作者已停止对其主题的维护更新，故对此进行深度修改定制，形成自己特有的主题风格。</li><li>yileas为吸取各路大神经验总结而成，感谢开源、感谢互联网🌏</li><li>不定时→偶尔更新维护</li><li>依然存在很多的bug,欢迎大家提出issue.</li></ol><blockquote><p>一切以GitHub仓库内为准，此文未必及时更新，感谢理解。</p></blockquote>]]></content>
    
    <summary type="html">
    
      Hexo 魔改yilia主题 Yileas
    
    </summary>
    
    
    
      <category term="hexo" scheme="www.wblog.tech/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【GitHub+Coding】个人博客双线部署</title>
    <link href="www.wblog.tech/hexo-shuangxianbushu.html"/>
    <id>www.wblog.tech/hexo-shuangxianbushu.html</id>
    <published>2020-04-27T11:43:31.436Z</published>
    <updated>2020-05-11T03:37:47.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>将自己的个人博客双线部署，GitHub+Coding.</p><ul><li>真香</li><li>自己部署过程的懒人记事🐾<a id="more"></a></li></ul><h2 id="大体步骤"><a href="#大体步骤" class="headerlink" title="大体步骤"></a>大体步骤</h2><ul><li>文字简单叙述</li></ul><h1 id="先前条件"><a href="#先前条件" class="headerlink" title="先前条件"></a>先前条件</h1><p>已经将hexo个人博客部署到了GitHub上了。</p><h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><ol><li>拥有一个属于自己的coding账号</li><li>建立一个博客仓库，选择代码托管项目模板</li><li>项目名称最好要跟coding用户名一致，这样的好处主要在于访问方便，当然，自我估计如果要绑定自定义域名的话，此处可随便（注：博主未尝试，博主依然老老实实的添加的名称一致😂）</li><li>配置SSH，【个人设置】-【SSH公钥】-【新增公钥】。<br>此方式与GitHub的配置方法差不多，因之前部署至GitHub的时候，已经有了，一般情况下存放在 C:\Users\用户名.ssh 目录下的 id_rsa.pub 文件里，用记事本打开复制其内容即可。名称任意。<br>添加公钥后，我们可以右键 Get Bash，输入以下命令来检查是否配置成功：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@你的用户名.coding.net</span><br></pre></td></tr></table></figure>若出现以下提示，则证明配置成功：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coding 提示: Hello XXX, You&#39;ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span><br></pre></td></tr></table></figure></li><li>开启coding pages<br>进入你的coding项目仓库，选择项目设置-项目与成员-功能开关。打开持续部署功能开关。返回，选择持续部署选项-静态网站，选择立即部署，这样你就可以通过coding分配的域名进行访问了，如果想要通过自定义域名访问，在进入设置界面，自定义域名处绑定域名（注，绑定自定义域名需要将域名DNS 设置中添加 CNAME 记录指向DNS 设置中添加 CNAME 记录指向coding分配给你的域名）</li><li>自定义域名<br>打开域名管理，增加两条CNAME解析，指向coding分配的域名，记录处填写coding分配的域名，解析线路选择默认，主机记录一个填写www,一个填写@。和GitHub类似。将GitHub的解析线路更改为境外。这样做的原因是让在境内访问的时候走coding路线，境外访问的时候走GitHub路线。（据听说，阿里云的是智能解析，解析路线选择默认时，境外走GitHub，境内走coding。有兴趣的可以试一下，当然博主这次还是老老实实的将GitHub的默认解析路线修改为了境外😂）<br>在自定义域名处绑定自己的域名，并设置一个首选域名。之后，打开强制HTTPS。</li><li>配置_config.yml<br>进入你的项目，在右下角区域选择连接方式，建议选择SSH方式，较稳定。一键复制，然后打开本地博客根目录下的_config.yml文件，找到 deploy，添加 coding地址 ：coding:git@…，也就是刚刚复制的 SSH 地址。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_36759224/article/details/100879609" target="_blank" rel="noopener">Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HTTPS</a>  </p>]]></content>
    
    <summary type="html">
    
      Hexo-个人博客双线部署,【gitHub+coding】个人博客双线部署
    
    </summary>
    
    
    
      <category term="hexo" scheme="www.wblog.tech/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>阿里云-将Hexo博客搭建至云服务器上</title>
    <link href="www.wblog.tech/hexo-aliyundajianhexo.html"/>
    <id>www.wblog.tech/hexo-aliyundajianhexo.html</id>
    <published>2020-04-26T08:30:52.204Z</published>
    <updated>2020-05-17T12:19:30.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>记录文，无任何教程指导。<br>仅为自己检查反省所用。</p><a id="more"></a><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><ol><li>博客根目录下的_config.yml</li></ol><ul><li>修改仓库地址指向使其部署到云服务器上。</li><li>？大佬说：不可将博客同时部署到云服务器和GitHub上？<br>Q：现在我要是把serve里的网址把公网ip改成我的域名，博客配置里的部署指向同时指向云服务器和GitHub，能实现吗？<br>A:实现不了</li></ul><ol start="2"><li>vhost文件夹内文件的修改</li></ol><ul><li>cd /etc/nginx/vhost<br>vim blog.conf<br>修改地址指向：公网ip?域名？</li></ul><ol start="3"><li>vi /etc/nginx/nginx.conf </li></ol><ul><li>教程：添加include /etc/nginx/vhost/*.conf;</li><li>增加补错：添加root /home/www/website;<br>解决公网IP打开依然是centos的问题。<br>未解决，大佬：nginx版本的问题，无碍。</li></ul><ol start="4"><li>.ssh.ssh</li></ol><ul><li>设置git用户密码问题、成功公钥密钥文件ssh-keygen<br>目录下文件并不为id_rsa 和 id_rsa.pub<br>文件为.ssh.shh(模糊记忆)<br>但本地连接云服务器没问题。<br>注:本地连接云服务后云服务器上的相关操作均在本地电脑远程连接操作</li></ul><ol start="5"><li>现已取消阿里云服务器的部署。</li></ol><ul><li>#include /etc/nginx/vhost/*.conf;</li></ul><ol start="6"><li>域名解析</li></ol><ul><li>指到云服务器了？将hexo博客部署云服务器上</li></ul><h3 id="关闭开启部署，"><a href="#关闭开启部署，" class="headerlink" title="关闭开启部署，"></a>关闭开启部署，</h3><ul><li>#include /etc/nginx/vhost/*.conf;</li><li>???</li></ul><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://blog.csdn.net/NoCortY/article/details/99631249" target="_blank" rel="noopener">从零搭建Hexo博客并部署阿里云服务器（奶妈级教学）</a><br>特别感谢大佬的解答！🧐</p>]]></content>
    
    <summary type="html">
    
      阿里云-将Hexo博客搭建至云服务器上
    
    </summary>
    
    
    
      <category term="阿里云" scheme="www.wblog.tech/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>【闲】</title>
    <link href="www.wblog.tech/hexo-bowen1.html"/>
    <id>www.wblog.tech/hexo-bowen1.html</id>
    <published>2020-04-25T09:38:03.554Z</published>
    <updated>2020-05-11T03:35:58.895Z</updated>
    
    <content type="html"><![CDATA[<p>有人说，想要看一个人是否优秀，那就看他闲下来做什么。</p><p> 　　这世上有人忙里偷闲，利用坐车和排队的间隙，读书，思考，写作，也有人终日无所事事，虚度光阴。</p><p>　　闲，并不是一个人的福气。相反，废掉一个人最快的方式就是让他闲下来。</p><p>　　正如罗曼·罗兰所说：“生活中最沉重的负担不是工作，而是无聊。”</p><a id="more"></a><p>　　01</p><p>　　闲着闲着，一个人就废了。</p><p>　　蔡康永曾说过：“当你没有上进心的时候，你是在杀人，你不小心，杀了你自己。”</p><p>　　朋友大学毕业后，凭着高学历进了一家大公司，以为从此一生安稳，本职工作完成后便悠闲地追剧。</p><p>　　身边有同事下班后忙着考证、进修时，她嗤之以鼻，认为别人学历不如自己，再怎么努力也无济于事。</p><p>　　虽然每天按时上下班，和同事做着相似的工作，但只有潮水退去的时候，才能知道谁在裸泳。</p><p>　　不过五年时间，行业环境影响下，公司面临改革，需要裁员，高学历出身的她赫然在列。</p><p>　　彼时才发现，面临初出茅庐的年轻人，自己的体力和脑力都已经拼不过，几年来累积下来的阅历和经验没有转化成核心竞争力。</p><p>　　毕业八年的她被迫重返人才市场，但彼时的她与毕业时相比毫无长进，面试屡屡碰壁。</p><p>　　李尚龙曾说：</p><p>　　“真正的安稳是历经世事后的淡薄，你还没有见过世界，就想隐退山林，到头来只会是井底之蛙。”</p><p>　　人生如逆水行舟，不进则退。</p><p>　　优胜劣汰的世界里，你必须不断提升自己的价值。</p><p>　　被窝里的温度，远不如未来的收获温暖；书本里的故事，总有你学到的人生，贪图安逸，只会让生命生锈。</p><p>　　常有人感叹中年危机来得猝不及防，但其实在它到来之前，你有无数次让它绕开你的机会，但也许正是因为你选择了安逸，才给了它可乘之机。</p><p>　　02</p><p>　　人活到极致，就是不愿意闲下来。</p><p>　　沈从文曾说：我一生最怕是闲，一闲就把生命的意义全失去了。</p><p>　　他的学生汪曾祺曾在文章里这样描述沈从文：</p><p>　　冬天屋里生不起火，用被子围起来，还是不停地写。</p><p>　　到了晚年，他也不愿闲下来，参考大量资料整理完成了《中国古代服饰研究》。</p><p>　　别人享乐时候，他在写，有人质疑抨击他的时候，他还在写。</p><p>　　让忙碌成为生活的常态，是实现人生价值的必经之路。</p><p>　　人生有许多美好，无非是长期坚持的结果，而那些厉害的人，无一例外都过着自律的生活。</p><p>　　“闲不住”从来都不是人们所说的毛病和坏事，而是上天给的嘉奖。</p><p>　　一口气爬上10层楼梯不带喘气，这对一个年轻人来说都很难，但91岁的老人李绍鲁做到了。</p><p>　　他的养生秘诀就是：不让自己闲下来。</p><p>　　每天早上七点起床，锻炼一小时，八点吃完早餐，出门散步，九点半回来读书看报，下午听音乐、练书法，再继续锻炼一小时，抽空还帮老伴做家务。</p><p>　　有句话说：闲人愁多，懒人病多，忙人快活！</p><p>　　的确如此。当一个人闲下来，他的心灵和身体都将受到折磨。闲下来会容易胡思乱想，自怨自艾，而身体上的懒惰也会让我们离健康越来越远。</p><p>　　相反，忙碌，却是世间珍贵的良药，忙起来，生活便有了奔头。</p><p>　　日本作家石黑一雄曾说：年老之后 当我回顾自己的一生，看到我用毕生的精力去捕捉那个世界独特的美，我相信我会心满意足的，没有人能使我相信我是虚度了光阴。</p><p>　　台湾一群平均年龄81岁的老人，骑着摩托车环游台湾的故事触动了很多人。</p><p>　　不老骑士说：“走，我们骑着欧兜迈（摩托车）环台去！ ”</p><p>　　他们便出发了，从南到北，从黑夜到白天，环岛十三天。他们当中有2位曾患癌症，4位需要带助听器，8位患了心脏病，每个人都有关节退化的毛病。</p><p>　　身体和心灵总要有一个在路上，这件事与年龄无关。安静地待在医院里，是一种活法，勇敢地走出去也是一种活法。</p><p>　　忙碌且艰难地活着，虽然辛苦，但如果有来世，很多人还是会选择那种滚烫的人生，只有那样才能实现人生的价值。</p><p>　　03</p><p>　　太闲的人生，其实是一场灾难。</p><p>　　茨威格曾说：</p><p>　　命运所赠送的每一份礼物，都暗自标好了价格。</p><p>　　英国有位男子，因为中奖从一贫如洗的垃圾工变成了千万富翁。</p><p>　　他辞去工作，挥霍无度地购买豪宅名车、吸毒、嫖娼和赌博。</p><p>　　在短短7年中败光了970万英镑，重新沦为穷光蛋，而妻子女儿也双双弃他而去。</p><p>　　物质可以满足一个人一时的快乐，但当人生只剩下享乐和放纵，就难以体会到发自内心的快乐和成就感。</p><p>　　正如爱因斯坦所说：</p><p>　　“我从来不把安逸和快乐看作是生活目的本身——这种伦理基础，我叫它猪栏的理想。”</p><p>　　华人首富李嘉诚，一生征战商界，拥有无数财富，即便这样直到90岁他才选择退休。</p><p>　　没退休之前，不论几点睡觉，他总在清晨5点59分闹铃响后起床。随后，读新闻，打一个半小时高尔夫，再去办公室，开始工作，坚持数十年如一日。</p><p>　　李嘉诚的人生正印证了那句话：一万年太久，只争朝夕。</p><p>　　闲下来，你可能会快乐一阵子，但重复和虚无，有一天会让你感到厌倦。</p><p>　　忙起来可能会很累，你需要把时间分成好几份，甚至像挤海绵那样挤时间，但却可以让我们收获到很多，比如财富、幸福、内心的充实。</p><p>　　人生数载几十年，我们总要为这个世界留下些什么。永远不要把“闲”当做上天的恩赐，那些让你快乐的东西，有一天也会毁灭你。</p><p>　　04</p><p>　　《菜根谭》有言：人生太闲，则别念窃生；太忙，则真性不现。</p><p>　　诚然，太忙或太闲都不可取，忙中有闲，闲中有忙，有事做，有人爱，有所期待，才是人生最圆满的状态。</p><p>　　当你开始懂得珍惜时间，利用好时间，合理安排自己的生活，就是在延长生命的长度，拓宽人生的厚度，提升人生的高度。</p><p>　　所谓不负此生，就是不曾辜负生命中的每个阶段。</p>]]></content>
    
    <summary type="html">
    
      Hexo-博文1
    
    </summary>
    
    
    
      <category term="随笔记事" scheme="www.wblog.tech/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript——相关</title>
    <link href="www.wblog.tech/JavaScript-xiangguan.html"/>
    <id>www.wblog.tech/JavaScript-xiangguan.html</id>
    <published>2020-04-23T00:30:29.945Z</published>
    <updated>2020-05-11T03:38:36.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>javascript相关！<br>记录</p><a id="more"></a><h2 id="Expression-expected-javascript"><a href="#Expression-expected-javascript" class="headerlink" title="Expression expected.javascript"></a>Expression expected.javascript</h2><p>设置valine评论系统，修改valine.ejs插件。使得出现Expression expected.JavaScript错误。<br>百度查询得，javascript里面不可以直接使用EL表达式。<br>大佬：VScode未按照ejs插件?<br>暂不影响使用，待修改！</p>]]></content>
    
    <summary type="html">
    
      JavaScript——相关
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="www.wblog.tech/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>GitHub==star</title>
    <link href="www.wblog.tech/github-star.html"/>
    <id>www.wblog.tech/github-star.html</id>
    <published>2020-04-22T01:17:46.494Z</published>
    <updated>2020-05-11T03:37:19.843Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">宝藏仓库！！！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a089aa1e20f801d823ada22f53e8c6670e0ac7976a5cfda842df4e282967088e">8b53947704863c5f576a7399d4515d8fc13ad6a3c950dc6dc9bc6ed94cd34a4b588e9de919b63174b0307fe117c140eb922d7b2fc4588e8eef407eba602a061119ec2471efe6dc553fd2f51a05a34d0c2c0eec388e710fbdd657a7a50617e5dc6ddac153b168ea07c407b7ba82ab6a693c41dc28d618f137b93b3efabc26ca9f9af3d90531778ef658baadcd83bd55ea9df449cb404a730cd690e0a6467f1b2f7afd4ff03be94421268d722785d452c510c45809ec2d747bd5ea222084ca8961150f8bb15c99d73f23939ace217a66d66b2938e5dbc250cd2129bebbfd3cb3430739553c1275942cf6a224bc00d292c6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      github-star
    
    </summary>
    
    
    
      <category term="github" scheme="www.wblog.tech/tags/github/"/>
    
  </entry>
  
</feed>
